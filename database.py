import sqlite3# sozdat/podkluchitsa k bazeconnection = sqlite3.connect('dostavka.db')# sozdaem perevodchiksql = connection.cursor()# zapros na sozdanie tablici# sql.execute('CREATE TABLE users (id INTEGER, name TEXT, phone_number TEXT, loc_lat REAL, loc_long REAL, gender TEXT);')# sql.execute('CREATE TABLE products (product_name TEXT, cost REAL, description TEXT, photo TEXT);')# sql.execute('CREATE TABLE cart (user_id INTEGER, product_name TEXT, product_count TEXT);')# dobavlenie polzovatelyadef add_user(user_id, name, phone_number, latitude, longitude,gender):    # sozdat/podkluchitsa k baze    connection = sqlite3.connect('dostavka.db')    # sozdaem perevodchik    sql = connection.cursor()    # dobavlenie polzovatelya v bazu    sql.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?);', (user_id, str(name), str(phone_number), latitude, longitude, str(gender)))    # fiksiruem obnovleniya    connection.commit()# poluchenie polzovatelyadef get_users():    # sozdat/podkluchitsa k baze    connection = sqlite3.connect('dostavka.db')    # sozdaem perevodchik    sql = connection.cursor()    # zapros dlya polucheniya dannix iz bazi    users = sql.execute('SELECT name, id, gender FROM users;')    # вывод в виде списка с кортежами    return users.fetchall()# zapros dlya udaleniya iz bazidef delete_user():    # sozdat/podkluchitsa k baze    connection = sqlite3.connect('dostavka.db')    # sozdaem perevodchik    sql = connection.cursor()    # otpravlyaem zapros na udalenie    sql.execute('DELETE FROM users')    # зафиксировать обновления    connection.commit()delete_user()def add_product(product_name, cost, description, photo):    connection = sqlite3.connect('products.db')    sql = connection.cursor()    sql.execute('INSERT INTO products VALUES (?, ?, ?, ?);', (product_name, cost, description, photo))    connection.commit()def get_product_name():    connection = sqlite3.connect('products.db')    sql = connection.cursor()    product_names = sql.execute('SELECT product_name FROM products;')    return product_names.fetchall()def get_all_products():    connection = sqlite3.connect('products.db')    sql = connection.cursor()    all_products = sql.execute('SELECT * FROM products;')    return all_products.fetchall()# функция для проверки ползователя на наличие в базеdef chek_user(user_id):    connection = sqlite3.connect('dostavka.db')    sql = connection.cursor()    checker = sql.execute('SELECT id FROM users WHERE id=?;', (user_id, ))    # проверка на наличие данных из запроса    if checker.fetchone():        return True    else:        return Falsedef add_pr_in_cart(user_id, product_name, product_count):    connection = sqlite3.connect('cart.db')    sql = connection.cursor()    sql.execute('INSERT INTO cart VALUES (?, ?, ?);', (user_id, str(product_name), str(product_count)))#создать таблицу корзины# колонки: user_id, product_name, product_count# создать функцию добавления user_id, product_name, product_count в корзину# создать функцию получения корзины (WHERE user_id=?)# создать функцию удаления корзины (WHERE user_id=?)